// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pesan.proto

package pesan_grpc_stubs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Pesan_OnboardWithPublicKey_FullMethodName      = "/pesan.Pesan/OnboardWithPublicKey"
	Pesan_VerifyPublicKeyAndOnboard_FullMethodName = "/pesan.Pesan/VerifyPublicKeyAndOnboard"
	Pesan_DiscoverLogin_FullMethodName             = "/pesan.Pesan/DiscoverLogin"
	Pesan_VerifyPublicKeyLogin_FullMethodName      = "/pesan.Pesan/VerifyPublicKeyLogin"
	Pesan_CreateNewProduct_FullMethodName          = "/pesan.Pesan/CreateNewProduct"
	Pesan_UploadProductPhotos_FullMethodName       = "/pesan.Pesan/UploadProductPhotos"
)

// PesanClient is the client API for Pesan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PesanClient interface {
	OnboardWithPublicKey(ctx context.Context, in *OnboardRequest, opts ...grpc.CallOption) (*AssertSession, error)
	VerifyPublicKeyAndOnboard(ctx context.Context, in *VerifyPublicKeyRequest, opts ...grpc.CallOption) (*UserSession, error)
	DiscoverLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AttestSession, error)
	VerifyPublicKeyLogin(ctx context.Context, in *VerifyPublicKeyRequest, opts ...grpc.CallOption) (*UserSession, error)
	CreateNewProduct(ctx context.Context, in *NewProductRequest, opts ...grpc.CallOption) (*NewProductReply, error)
	UploadProductPhotos(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewPhoto, emptypb.Empty], error)
}

type pesanClient struct {
	cc grpc.ClientConnInterface
}

func NewPesanClient(cc grpc.ClientConnInterface) PesanClient {
	return &pesanClient{cc}
}

func (c *pesanClient) OnboardWithPublicKey(ctx context.Context, in *OnboardRequest, opts ...grpc.CallOption) (*AssertSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssertSession)
	err := c.cc.Invoke(ctx, Pesan_OnboardWithPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pesanClient) VerifyPublicKeyAndOnboard(ctx context.Context, in *VerifyPublicKeyRequest, opts ...grpc.CallOption) (*UserSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSession)
	err := c.cc.Invoke(ctx, Pesan_VerifyPublicKeyAndOnboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pesanClient) DiscoverLogin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AttestSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttestSession)
	err := c.cc.Invoke(ctx, Pesan_DiscoverLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pesanClient) VerifyPublicKeyLogin(ctx context.Context, in *VerifyPublicKeyRequest, opts ...grpc.CallOption) (*UserSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSession)
	err := c.cc.Invoke(ctx, Pesan_VerifyPublicKeyLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pesanClient) CreateNewProduct(ctx context.Context, in *NewProductRequest, opts ...grpc.CallOption) (*NewProductReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewProductReply)
	err := c.cc.Invoke(ctx, Pesan_CreateNewProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pesanClient) UploadProductPhotos(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewPhoto, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Pesan_ServiceDesc.Streams[0], Pesan_UploadProductPhotos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewPhoto, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Pesan_UploadProductPhotosClient = grpc.ClientStreamingClient[NewPhoto, emptypb.Empty]

// PesanServer is the server API for Pesan service.
// All implementations must embed UnimplementedPesanServer
// for forward compatibility.
type PesanServer interface {
	OnboardWithPublicKey(context.Context, *OnboardRequest) (*AssertSession, error)
	VerifyPublicKeyAndOnboard(context.Context, *VerifyPublicKeyRequest) (*UserSession, error)
	DiscoverLogin(context.Context, *emptypb.Empty) (*AttestSession, error)
	VerifyPublicKeyLogin(context.Context, *VerifyPublicKeyRequest) (*UserSession, error)
	CreateNewProduct(context.Context, *NewProductRequest) (*NewProductReply, error)
	UploadProductPhotos(grpc.ClientStreamingServer[NewPhoto, emptypb.Empty]) error
	mustEmbedUnimplementedPesanServer()
}

// UnimplementedPesanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPesanServer struct{}

func (UnimplementedPesanServer) OnboardWithPublicKey(context.Context, *OnboardRequest) (*AssertSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardWithPublicKey not implemented")
}
func (UnimplementedPesanServer) VerifyPublicKeyAndOnboard(context.Context, *VerifyPublicKeyRequest) (*UserSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPublicKeyAndOnboard not implemented")
}
func (UnimplementedPesanServer) DiscoverLogin(context.Context, *emptypb.Empty) (*AttestSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverLogin not implemented")
}
func (UnimplementedPesanServer) VerifyPublicKeyLogin(context.Context, *VerifyPublicKeyRequest) (*UserSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPublicKeyLogin not implemented")
}
func (UnimplementedPesanServer) CreateNewProduct(context.Context, *NewProductRequest) (*NewProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewProduct not implemented")
}
func (UnimplementedPesanServer) UploadProductPhotos(grpc.ClientStreamingServer[NewPhoto, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method UploadProductPhotos not implemented")
}
func (UnimplementedPesanServer) mustEmbedUnimplementedPesanServer() {}
func (UnimplementedPesanServer) testEmbeddedByValue()               {}

// UnsafePesanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PesanServer will
// result in compilation errors.
type UnsafePesanServer interface {
	mustEmbedUnimplementedPesanServer()
}

func RegisterPesanServer(s grpc.ServiceRegistrar, srv PesanServer) {
	// If the following call pancis, it indicates UnimplementedPesanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Pesan_ServiceDesc, srv)
}

func _Pesan_OnboardWithPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PesanServer).OnboardWithPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pesan_OnboardWithPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PesanServer).OnboardWithPublicKey(ctx, req.(*OnboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pesan_VerifyPublicKeyAndOnboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PesanServer).VerifyPublicKeyAndOnboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pesan_VerifyPublicKeyAndOnboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PesanServer).VerifyPublicKeyAndOnboard(ctx, req.(*VerifyPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pesan_DiscoverLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PesanServer).DiscoverLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pesan_DiscoverLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PesanServer).DiscoverLogin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pesan_VerifyPublicKeyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PesanServer).VerifyPublicKeyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pesan_VerifyPublicKeyLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PesanServer).VerifyPublicKeyLogin(ctx, req.(*VerifyPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pesan_CreateNewProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PesanServer).CreateNewProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pesan_CreateNewProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PesanServer).CreateNewProduct(ctx, req.(*NewProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pesan_UploadProductPhotos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PesanServer).UploadProductPhotos(&grpc.GenericServerStream[NewPhoto, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Pesan_UploadProductPhotosServer = grpc.ClientStreamingServer[NewPhoto, emptypb.Empty]

// Pesan_ServiceDesc is the grpc.ServiceDesc for Pesan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pesan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pesan.Pesan",
	HandlerType: (*PesanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnboardWithPublicKey",
			Handler:    _Pesan_OnboardWithPublicKey_Handler,
		},
		{
			MethodName: "VerifyPublicKeyAndOnboard",
			Handler:    _Pesan_VerifyPublicKeyAndOnboard_Handler,
		},
		{
			MethodName: "DiscoverLogin",
			Handler:    _Pesan_DiscoverLogin_Handler,
		},
		{
			MethodName: "VerifyPublicKeyLogin",
			Handler:    _Pesan_VerifyPublicKeyLogin_Handler,
		},
		{
			MethodName: "CreateNewProduct",
			Handler:    _Pesan_CreateNewProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadProductPhotos",
			Handler:       _Pesan_UploadProductPhotos_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pesan.proto",
}
