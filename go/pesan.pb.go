// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: pesan.proto

package pesan_grpc_stubs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Day int32

const (
	Day_monday    Day = 0
	Day_tuesday   Day = 1
	Day_wednesday Day = 2
	Day_thursday  Day = 3
	Day_friday    Day = 4
	Day_saturday  Day = 5
	Day_sunday    Day = 6
)

// Enum value maps for Day.
var (
	Day_name = map[int32]string{
		0: "monday",
		1: "tuesday",
		2: "wednesday",
		3: "thursday",
		4: "friday",
		5: "saturday",
		6: "sunday",
	}
	Day_value = map[string]int32{
		"monday":    0,
		"tuesday":   1,
		"wednesday": 2,
		"thursday":  3,
		"friday":    4,
		"saturday":  5,
		"sunday":    6,
	}
)

func (x Day) Enum() *Day {
	p := new(Day)
	*p = x
	return p
}

func (x Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Day) Descriptor() protoreflect.EnumDescriptor {
	return file_pesan_proto_enumTypes[0].Descriptor()
}

func (Day) Type() protoreflect.EnumType {
	return &file_pesan_proto_enumTypes[0]
}

func (x Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Day.Descriptor instead.
func (Day) EnumDescriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{0}
}

type ContactType int32

const (
	ContactType_email ContactType = 0
	ContactType_phone ContactType = 1
)

// Enum value maps for ContactType.
var (
	ContactType_name = map[int32]string{
		0: "email",
		1: "phone",
	}
	ContactType_value = map[string]int32{
		"email": 0,
		"phone": 1,
	}
)

func (x ContactType) Enum() *ContactType {
	p := new(ContactType)
	*p = x
	return p
}

func (x ContactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactType) Descriptor() protoreflect.EnumDescriptor {
	return file_pesan_proto_enumTypes[1].Descriptor()
}

func (ContactType) Type() protoreflect.EnumType {
	return &file_pesan_proto_enumTypes[1]
}

func (x ContactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactType.Descriptor instead.
func (ContactType) EnumDescriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{1}
}

type OnboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserHandle  string  `protobuf:"bytes,1,opt,name=user_handle,json=userHandle,proto3" json:"user_handle,omitempty"`
	DisplayName *string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	NewPassword []byte  `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3,oneof" json:"new_password,omitempty"`
}

func (x *OnboardRequest) Reset() {
	*x = OnboardRequest{}
	mi := &file_pesan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnboardRequest) ProtoMessage() {}

func (x *OnboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnboardRequest.ProtoReflect.Descriptor instead.
func (*OnboardRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{0}
}

func (x *OnboardRequest) GetUserHandle() string {
	if x != nil {
		return x.UserHandle
	}
	return ""
}

func (x *OnboardRequest) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *OnboardRequest) GetNewPassword() []byte {
	if x != nil {
		return x.NewPassword
	}
	return nil
}

type PasswordLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserHandle string `protobuf:"bytes,1,opt,name=user_handle,json=userHandle,proto3" json:"user_handle,omitempty"`
	Password   []byte `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PasswordLoginRequest) Reset() {
	*x = PasswordLoginRequest{}
	mi := &file_pesan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordLoginRequest) ProtoMessage() {}

func (x *PasswordLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordLoginRequest.ProtoReflect.Descriptor instead.
func (*PasswordLoginRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{1}
}

func (x *PasswordLoginRequest) GetUserHandle() string {
	if x != nil {
		return x.UserHandle
	}
	return ""
}

func (x *PasswordLoginRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

type ReAuthPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password []byte `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ReAuthPasswordRequest) Reset() {
	*x = ReAuthPasswordRequest{}
	mi := &file_pesan_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReAuthPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReAuthPasswordRequest) ProtoMessage() {}

func (x *ReAuthPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReAuthPasswordRequest.ProtoReflect.Descriptor instead.
func (*ReAuthPasswordRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{2}
}

func (x *ReAuthPasswordRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

type ReAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signed   []byte `protobuf:"bytes,1,opt,name=signed,proto3,oneof" json:"signed,omitempty"`
	Password []byte `protobuf:"bytes,2,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *ReAuthRequest) Reset() {
	*x = ReAuthRequest{}
	mi := &file_pesan_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReAuthRequest) ProtoMessage() {}

func (x *ReAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReAuthRequest.ProtoReflect.Descriptor instead.
func (*ReAuthRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{3}
}

func (x *ReAuthRequest) GetSigned() []byte {
	if x != nil {
		return x.Signed
	}
	return nil
}

func (x *ReAuthRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

// this allow for caching on front-end & prevent abuse calls
type PublicKeyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge  []byte                 `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	ValidUntil *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
}

func (x *PublicKeyOptions) Reset() {
	*x = PublicKeyOptions{}
	mi := &file_pesan_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKeyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyOptions) ProtoMessage() {}

func (x *PublicKeyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyOptions.ProtoReflect.Descriptor instead.
func (*PublicKeyOptions) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{4}
}

func (x *PublicKeyOptions) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *PublicKeyOptions) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

type VerifyPublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signed     []byte  `protobuf:"bytes,1,opt,name=signed,proto3" json:"signed,omitempty"`
	UserHandle *string `protobuf:"bytes,2,opt,name=user_handle,json=userHandle,proto3,oneof" json:"user_handle,omitempty"`
}

func (x *VerifyPublicKeyRequest) Reset() {
	*x = VerifyPublicKeyRequest{}
	mi := &file_pesan_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPublicKeyRequest) ProtoMessage() {}

func (x *VerifyPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*VerifyPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyPublicKeyRequest) GetSigned() []byte {
	if x != nil {
		return x.Signed
	}
	return nil
}

func (x *VerifyPublicKeyRequest) GetUserHandle() string {
	if x != nil && x.UserHandle != nil {
		return *x.UserHandle
	}
	return ""
}

type RefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	mi := &file_pesan_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{6}
}

func (x *RefreshRequest) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type RefreshReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken           []byte                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken          []byte                 `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessTokenExpiresAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=access_token_expires_at,json=accessTokenExpiresAt,proto3" json:"access_token_expires_at,omitempty"`
	RefreshTokenExpiresAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=refresh_token_expires_at,json=refreshTokenExpiresAt,proto3" json:"refresh_token_expires_at,omitempty"`
}

func (x *RefreshReply) Reset() {
	*x = RefreshReply{}
	mi := &file_pesan_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshReply) ProtoMessage() {}

func (x *RefreshReply) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshReply.ProtoReflect.Descriptor instead.
func (*RefreshReply) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{7}
}

func (x *RefreshReply) GetAccessToken() []byte {
	if x != nil {
		return x.AccessToken
	}
	return nil
}

func (x *RefreshReply) GetRefreshToken() []byte {
	if x != nil {
		return x.RefreshToken
	}
	return nil
}

func (x *RefreshReply) GetAccessTokenExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessTokenExpiresAt
	}
	return nil
}

func (x *RefreshReply) GetRefreshTokenExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefreshTokenExpiresAt
	}
	return nil
}

type UserSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken           []byte                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	UserHandle            string                 `protobuf:"bytes,2,opt,name=user_handle,json=userHandle,proto3" json:"user_handle,omitempty"`
	DisplayName           string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	RefreshToken          []byte                 `protobuf:"bytes,4,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	TotalPasskey          *uint32                `protobuf:"varint,5,opt,name=total_passkey,json=totalPasskey,proto3,oneof" json:"total_passkey,omitempty"`
	LastPasswordUpdated   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_password_updated,json=lastPasswordUpdated,proto3,oneof" json:"last_password_updated,omitempty"`
	AccessTokenExpiresAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=access_token_expires_at,json=accessTokenExpiresAt,proto3" json:"access_token_expires_at,omitempty"`
	RefreshTokenExpiresAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=refresh_token_expires_at,json=refreshTokenExpiresAt,proto3" json:"refresh_token_expires_at,omitempty"`
}

func (x *UserSession) Reset() {
	*x = UserSession{}
	mi := &file_pesan_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSession) ProtoMessage() {}

func (x *UserSession) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSession.ProtoReflect.Descriptor instead.
func (*UserSession) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{8}
}

func (x *UserSession) GetAccessToken() []byte {
	if x != nil {
		return x.AccessToken
	}
	return nil
}

func (x *UserSession) GetUserHandle() string {
	if x != nil {
		return x.UserHandle
	}
	return ""
}

func (x *UserSession) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserSession) GetRefreshToken() []byte {
	if x != nil {
		return x.RefreshToken
	}
	return nil
}

func (x *UserSession) GetTotalPasskey() uint32 {
	if x != nil && x.TotalPasskey != nil {
		return *x.TotalPasskey
	}
	return 0
}

func (x *UserSession) GetLastPasswordUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPasswordUpdated
	}
	return nil
}

func (x *UserSession) GetAccessTokenExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessTokenExpiresAt
	}
	return nil
}

func (x *UserSession) GetRefreshTokenExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefreshTokenExpiresAt
	}
	return nil
}

type OperationHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *OperationHour) Reset() {
	*x = OperationHour{}
	mi := &file_pesan_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationHour) ProtoMessage() {}

func (x *OperationHour) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationHour.ProtoReflect.Descriptor instead.
func (*OperationHour) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{9}
}

func (x *OperationHour) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *OperationHour) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    ContactType `protobuf:"varint,1,opt,name=type,proto3,enum=pesan.ContactType" json:"type,omitempty"`
	Display string      `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Actual  string      `protobuf:"bytes,3,opt,name=actual,proto3" json:"actual,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	mi := &file_pesan_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{10}
}

func (x *Contact) GetType() ContactType {
	if x != nil {
		return x.Type
	}
	return ContactType_email
}

func (x *Contact) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *Contact) GetActual() string {
	if x != nil {
		return x.Actual
	}
	return ""
}

type NewShopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contacts      []*Contact     `protobuf:"bytes,2,rep,name=contacts,proto3" json:"contacts,omitempty"`
	Location      string         `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Tags          []string       `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	OpensAt       *OperationHour `protobuf:"bytes,5,opt,name=opens_at,json=opensAt,proto3" json:"opens_at,omitempty"`
	ClosesAt      *OperationHour `protobuf:"bytes,6,opt,name=closes_at,json=closesAt,proto3" json:"closes_at,omitempty"`
	OperationDays []Day          `protobuf:"varint,7,rep,packed,name=operation_days,json=operationDays,proto3,enum=pesan.Day" json:"operation_days,omitempty"`
	// this is to allow the refresh process efficiently
	RefreshToken []byte         `protobuf:"bytes,8,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
	RAuth        *ReAuthRequest `protobuf:"bytes,9,opt,name=r_auth,json=rAuth,proto3,oneof" json:"r_auth,omitempty"`
}

func (x *NewShopRequest) Reset() {
	*x = NewShopRequest{}
	mi := &file_pesan_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewShopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShopRequest) ProtoMessage() {}

func (x *NewShopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShopRequest.ProtoReflect.Descriptor instead.
func (*NewShopRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{11}
}

func (x *NewShopRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewShopRequest) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *NewShopRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *NewShopRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NewShopRequest) GetOpensAt() *OperationHour {
	if x != nil {
		return x.OpensAt
	}
	return nil
}

func (x *NewShopRequest) GetClosesAt() *OperationHour {
	if x != nil {
		return x.ClosesAt
	}
	return nil
}

func (x *NewShopRequest) GetOperationDays() []Day {
	if x != nil {
		return x.OperationDays
	}
	return nil
}

func (x *NewShopRequest) GetRefreshToken() []byte {
	if x != nil {
		return x.RefreshToken
	}
	return nil
}

func (x *NewShopRequest) GetRAuth() *ReAuthRequest {
	if x != nil {
		return x.RAuth
	}
	return nil
}

type UuId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UuId) Reset() {
	*x = UuId{}
	mi := &file_pesan_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UuId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuId) ProtoMessage() {}

func (x *UuId) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuId.ProtoReflect.Descriptor instead.
func (*UuId) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{12}
}

func (x *UuId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type NewShopReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId        *UuId                  `protobuf:"bytes,1,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	FreshSession  *RefreshReply          `protobuf:"bytes,3,opt,name=fresh_session,json=freshSession,proto3,oneof" json:"fresh_session,omitempty"`
	Options       *PublicKeyOptions      `protobuf:"bytes,4,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *NewShopReply) Reset() {
	*x = NewShopReply{}
	mi := &file_pesan_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewShopReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShopReply) ProtoMessage() {}

func (x *NewShopReply) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShopReply.ProtoReflect.Descriptor instead.
func (*NewShopReply) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{13}
}

func (x *NewShopReply) GetShopId() *UuId {
	if x != nil {
		return x.ShopId
	}
	return nil
}

func (x *NewShopReply) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *NewShopReply) GetFreshSession() *RefreshReply {
	if x != nil {
		return x.FreshSession
	}
	return nil
}

func (x *NewShopReply) GetOptions() *PublicKeyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ShopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page            uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	LastRequestedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_requested_at,json=lastRequestedAt,proto3" json:"last_requested_at,omitempty"`
	// this is to allow the refresh process efficiently
	RefreshToken []byte         `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
	RAuth        *ReAuthRequest `protobuf:"bytes,4,opt,name=r_auth,json=rAuth,proto3,oneof" json:"r_auth,omitempty"`
}

func (x *ShopRequest) Reset() {
	*x = ShopRequest{}
	mi := &file_pesan_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopRequest) ProtoMessage() {}

func (x *ShopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopRequest.ProtoReflect.Descriptor instead.
func (*ShopRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{14}
}

func (x *ShopRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShopRequest) GetLastRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRequestedAt
	}
	return nil
}

func (x *ShopRequest) GetRefreshToken() []byte {
	if x != nil {
		return x.RefreshToken
	}
	return nil
}

func (x *ShopRequest) GetRAuth() *ReAuthRequest {
	if x != nil {
		return x.RAuth
	}
	return nil
}

type ShopPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId        *UuId          `protobuf:"bytes,1,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tags          []string       `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	OpensAt       *OperationHour `protobuf:"bytes,4,opt,name=opens_at,json=opensAt,proto3" json:"opens_at,omitempty"`
	ClosesAt      *OperationHour `protobuf:"bytes,5,opt,name=closes_at,json=closesAt,proto3" json:"closes_at,omitempty"`
	Contacts      []*Contact     `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`
	OperationDays []Day          `protobuf:"varint,7,rep,packed,name=operation_days,json=operationDays,proto3,enum=pesan.Day" json:"operation_days,omitempty"`
	Location      *string        `protobuf:"bytes,8,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *ShopPb) Reset() {
	*x = ShopPb{}
	mi := &file_pesan_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopPb) ProtoMessage() {}

func (x *ShopPb) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopPb.ProtoReflect.Descriptor instead.
func (*ShopPb) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{15}
}

func (x *ShopPb) GetShopId() *UuId {
	if x != nil {
		return x.ShopId
	}
	return nil
}

func (x *ShopPb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShopPb) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ShopPb) GetOpensAt() *OperationHour {
	if x != nil {
		return x.OpensAt
	}
	return nil
}

func (x *ShopPb) GetClosesAt() *OperationHour {
	if x != nil {
		return x.ClosesAt
	}
	return nil
}

func (x *ShopPb) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *ShopPb) GetOperationDays() []Day {
	if x != nil {
		return x.OperationDays
	}
	return nil
}

func (x *ShopPb) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

type RolePb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId         *UuId `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	EditShop       bool  `protobuf:"varint,2,opt,name=edit_shop,json=editShop,proto3" json:"edit_shop,omitempty"`
	OpenCloseShop  bool  `protobuf:"varint,3,opt,name=open_close_shop,json=openCloseShop,proto3" json:"open_close_shop,omitempty"`
	CreateProducts bool  `protobuf:"varint,4,opt,name=create_products,json=createProducts,proto3" json:"create_products,omitempty"`
	EditProducts   bool  `protobuf:"varint,5,opt,name=edit_products,json=editProducts,proto3" json:"edit_products,omitempty"`
	DeleteProducts bool  `protobuf:"varint,6,opt,name=delete_products,json=deleteProducts,proto3" json:"delete_products,omitempty"`
	CreateOrders   bool  `protobuf:"varint,7,opt,name=create_orders,json=createOrders,proto3" json:"create_orders,omitempty"`
	EditOrders     bool  `protobuf:"varint,8,opt,name=edit_orders,json=editOrders,proto3" json:"edit_orders,omitempty"`
}

func (x *RolePb) Reset() {
	*x = RolePb{}
	mi := &file_pesan_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RolePb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePb) ProtoMessage() {}

func (x *RolePb) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePb.ProtoReflect.Descriptor instead.
func (*RolePb) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{16}
}

func (x *RolePb) GetRoleId() *UuId {
	if x != nil {
		return x.RoleId
	}
	return nil
}

func (x *RolePb) GetEditShop() bool {
	if x != nil {
		return x.EditShop
	}
	return false
}

func (x *RolePb) GetOpenCloseShop() bool {
	if x != nil {
		return x.OpenCloseShop
	}
	return false
}

func (x *RolePb) GetCreateProducts() bool {
	if x != nil {
		return x.CreateProducts
	}
	return false
}

func (x *RolePb) GetEditProducts() bool {
	if x != nil {
		return x.EditProducts
	}
	return false
}

func (x *RolePb) GetDeleteProducts() bool {
	if x != nil {
		return x.DeleteProducts
	}
	return false
}

func (x *RolePb) GetCreateOrders() bool {
	if x != nil {
		return x.CreateOrders
	}
	return false
}

func (x *RolePb) GetEditOrders() bool {
	if x != nil {
		return x.EditOrders
	}
	return false
}

type ShopRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shop *ShopPb `protobuf:"bytes,1,opt,name=shop,proto3,oneof" json:"shop,omitempty"`
	Role *RolePb `protobuf:"bytes,2,opt,name=role,proto3,oneof" json:"role,omitempty"`
}

func (x *ShopRole) Reset() {
	*x = ShopRole{}
	mi := &file_pesan_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopRole) ProtoMessage() {}

func (x *ShopRole) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopRole.ProtoReflect.Descriptor instead.
func (*ShopRole) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{17}
}

func (x *ShopRole) GetShop() *ShopPb {
	if x != nil {
		return x.Shop
	}
	return nil
}

func (x *ShopRole) GetRole() *RolePb {
	if x != nil {
		return x.Role
	}
	return nil
}

type ShopPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shops        []*ShopRole       `protobuf:"bytes,1,rep,name=shops,proto3" json:"shops,omitempty"`
	FreshSession *RefreshReply     `protobuf:"bytes,2,opt,name=fresh_session,json=freshSession,proto3,oneof" json:"fresh_session,omitempty"`
	Options      *PublicKeyOptions `protobuf:"bytes,3,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *ShopPage) Reset() {
	*x = ShopPage{}
	mi := &file_pesan_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopPage) ProtoMessage() {}

func (x *ShopPage) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopPage.ProtoReflect.Descriptor instead.
func (*ShopPage) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{18}
}

func (x *ShopPage) GetShops() []*ShopRole {
	if x != nil {
		return x.Shops
	}
	return nil
}

func (x *ShopPage) GetFreshSession() *RefreshReply {
	if x != nil {
		return x.FreshSession
	}
	return nil
}

func (x *ShopPage) GetOptions() *PublicKeyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type NewProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	UnitLabel   string      `protobuf:"bytes,3,opt,name=unit_label,json=unitLabel,proto3" json:"unit_label,omitempty"`
	UnitPrice   float64     `protobuf:"fixed64,4,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Categories  []*Category `protobuf:"bytes,5,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *NewProductRequest) Reset() {
	*x = NewProductRequest{}
	mi := &file_pesan_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProductRequest) ProtoMessage() {}

func (x *NewProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProductRequest.ProtoReflect.Descriptor instead.
func (*NewProductRequest) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{19}
}

func (x *NewProductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewProductRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NewProductRequest) GetUnitLabel() string {
	if x != nil {
		return x.UnitLabel
	}
	return ""
}

func (x *NewProductRequest) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *NewProductRequest) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for existing category selection
	CategoryId *string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3,oneof" json:"category_id,omitempty"`
	// for new category
	Name            *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description     *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	AvailableFrom   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=available_from,json=availableFrom,proto3,oneof" json:"available_from,omitempty"`
	AvailableUntil  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=available_until,json=availableUntil,proto3,oneof" json:"available_until,omitempty"`
	AvailableWeekly []string               `protobuf:"bytes,6,rep,name=available_weekly,json=availableWeekly,proto3" json:"available_weekly,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_pesan_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{20}
}

func (x *Category) GetCategoryId() string {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Category) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Category) GetAvailableFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.AvailableFrom
	}
	return nil
}

func (x *Category) GetAvailableUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.AvailableUntil
	}
	return nil
}

func (x *Category) GetAvailableWeekly() []string {
	if x != nil {
		return x.AvailableWeekly
	}
	return nil
}

type NewProductReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewProductId string `protobuf:"bytes,1,opt,name=new_product_id,json=newProductId,proto3" json:"new_product_id,omitempty"`
}

func (x *NewProductReply) Reset() {
	*x = NewProductReply{}
	mi := &file_pesan_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewProductReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProductReply) ProtoMessage() {}

func (x *NewProductReply) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProductReply.ProtoReflect.Descriptor instead.
func (*NewProductReply) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{21}
}

func (x *NewProductReply) GetNewProductId() string {
	if x != nil {
		return x.NewProductId
	}
	return ""
}

type NewPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *NewPhoto) Reset() {
	*x = NewPhoto{}
	mi := &file_pesan_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPhoto) ProtoMessage() {}

func (x *NewPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_pesan_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPhoto.ProtoReflect.Descriptor instead.
func (*NewPhoto) Descriptor() ([]byte, []int) {
	return file_pesan_proto_rawDescGZIP(), []int{22}
}

func (x *NewPhoto) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

var File_pesan_proto protoreflect.FileDescriptor

var file_pesan_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x65, 0x73, 0x61, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x33, 0x0a,
	0x15, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x65, 0x0a, 0x0d, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6d, 0x0a, 0x10, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x66, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x22, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x12, 0x53, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xec, 0x03, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x53, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x63, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22, 0x90, 0x03, 0x0a, 0x0e, 0x4e,
	0x65, 0x77, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x41, 0x74, 0x12, 0x31,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x41,
	0x74, 0x12, 0x31, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x65, 0x73, 0x61,
	0x6e, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x06, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x05, 0x72, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x22, 0x16, 0x0a,
	0x04, 0x55, 0x75, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x6f,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e,
	0x55, 0x75, 0x49, 0x64, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0c,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x72,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65,
	0x73, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x01, 0x52, 0x05, 0x72, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x22, 0xc7, 0x02, 0x0a, 0x06, 0x53,
	0x68, 0x6f, 0x70, 0x50, 0x62, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x55,
	0x75, 0x49, 0x64, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x52, 0x08, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x65, 0x73, 0x61,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x65,
	0x73, 0x61, 0x6e, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x02, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x62, 0x12,
	0x24, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x55, 0x75, 0x49, 0x64, 0x52, 0x06, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x53, 0x68,
	0x6f, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x64, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x6c, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x62,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x65, 0x73, 0x61,
	0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x62, 0x48, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x73, 0x61,
	0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcd,
	0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd,
	0x02, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04,
	0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x37,
	0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2a, 0x61, 0x0a, 0x03, 0x44, 0x61, 0x79,
	0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x77, 0x65, 0x64,
	0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72,
	0x73, 0x64, 0x61, 0x79, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x10, 0x05,
	0x12, 0x0a, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x06, 0x2a, 0x23, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x10,
	0x01, 0x32, 0xb5, 0x03, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x46, 0x0a, 0x14,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x65,
	0x73, 0x61, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x1d, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x13, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x65,
	0x73, 0x61, 0x6e, 0x2e, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x17, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1d, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x90, 0x04, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x65, 0x73, 0x61,
	0x6e, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4b, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x2e, 0x70, 0x65, 0x73, 0x61,
	0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e,
	0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a,
	0x12, 0x52, 0x65, 0x41, 0x75, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x15, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e,
	0x4e, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x12,
	0x12, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e,
	0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x13, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x12, 0x0f, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x42, 0x58, 0x0a, 0x22,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x69, 0x6c, 0x74, 0x73,
	0x6d, 0x2e, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x75,
	0x62, 0x73, 0x42, 0x0c, 0x50, 0x65, 0x73, 0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x01, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x69, 0x6c, 0x74, 0x73, 0x6d, 0x2f, 0x70, 0x65, 0x73, 0x61, 0x6e, 0x2d, 0x67, 0x72, 0x70, 0x63,
	0x2d, 0x73, 0x74, 0x75, 0x62, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pesan_proto_rawDescOnce sync.Once
	file_pesan_proto_rawDescData = file_pesan_proto_rawDesc
)

func file_pesan_proto_rawDescGZIP() []byte {
	file_pesan_proto_rawDescOnce.Do(func() {
		file_pesan_proto_rawDescData = protoimpl.X.CompressGZIP(file_pesan_proto_rawDescData)
	})
	return file_pesan_proto_rawDescData
}

var file_pesan_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pesan_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_pesan_proto_goTypes = []any{
	(Day)(0),                       // 0: pesan.Day
	(ContactType)(0),               // 1: pesan.ContactType
	(*OnboardRequest)(nil),         // 2: pesan.OnboardRequest
	(*PasswordLoginRequest)(nil),   // 3: pesan.PasswordLoginRequest
	(*ReAuthPasswordRequest)(nil),  // 4: pesan.ReAuthPasswordRequest
	(*ReAuthRequest)(nil),          // 5: pesan.ReAuthRequest
	(*PublicKeyOptions)(nil),       // 6: pesan.PublicKeyOptions
	(*VerifyPublicKeyRequest)(nil), // 7: pesan.VerifyPublicKeyRequest
	(*RefreshRequest)(nil),         // 8: pesan.RefreshRequest
	(*RefreshReply)(nil),           // 9: pesan.RefreshReply
	(*UserSession)(nil),            // 10: pesan.UserSession
	(*OperationHour)(nil),          // 11: pesan.OperationHour
	(*Contact)(nil),                // 12: pesan.Contact
	(*NewShopRequest)(nil),         // 13: pesan.NewShopRequest
	(*UuId)(nil),                   // 14: pesan.UuId
	(*NewShopReply)(nil),           // 15: pesan.NewShopReply
	(*ShopRequest)(nil),            // 16: pesan.ShopRequest
	(*ShopPb)(nil),                 // 17: pesan.ShopPb
	(*RolePb)(nil),                 // 18: pesan.RolePb
	(*ShopRole)(nil),               // 19: pesan.ShopRole
	(*ShopPage)(nil),               // 20: pesan.ShopPage
	(*NewProductRequest)(nil),      // 21: pesan.NewProductRequest
	(*Category)(nil),               // 22: pesan.Category
	(*NewProductReply)(nil),        // 23: pesan.NewProductReply
	(*NewPhoto)(nil),               // 24: pesan.NewPhoto
	(*timestamppb.Timestamp)(nil),  // 25: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 26: google.protobuf.Empty
}
var file_pesan_proto_depIdxs = []int32{
	25, // 0: pesan.PublicKeyOptions.valid_until:type_name -> google.protobuf.Timestamp
	25, // 1: pesan.RefreshReply.access_token_expires_at:type_name -> google.protobuf.Timestamp
	25, // 2: pesan.RefreshReply.refresh_token_expires_at:type_name -> google.protobuf.Timestamp
	25, // 3: pesan.UserSession.last_password_updated:type_name -> google.protobuf.Timestamp
	25, // 4: pesan.UserSession.access_token_expires_at:type_name -> google.protobuf.Timestamp
	25, // 5: pesan.UserSession.refresh_token_expires_at:type_name -> google.protobuf.Timestamp
	1,  // 6: pesan.Contact.type:type_name -> pesan.ContactType
	12, // 7: pesan.NewShopRequest.contacts:type_name -> pesan.Contact
	11, // 8: pesan.NewShopRequest.opens_at:type_name -> pesan.OperationHour
	11, // 9: pesan.NewShopRequest.closes_at:type_name -> pesan.OperationHour
	0,  // 10: pesan.NewShopRequest.operation_days:type_name -> pesan.Day
	5,  // 11: pesan.NewShopRequest.r_auth:type_name -> pesan.ReAuthRequest
	14, // 12: pesan.NewShopReply.shop_id:type_name -> pesan.UuId
	25, // 13: pesan.NewShopReply.last_updated_at:type_name -> google.protobuf.Timestamp
	9,  // 14: pesan.NewShopReply.fresh_session:type_name -> pesan.RefreshReply
	6,  // 15: pesan.NewShopReply.options:type_name -> pesan.PublicKeyOptions
	25, // 16: pesan.ShopRequest.last_requested_at:type_name -> google.protobuf.Timestamp
	5,  // 17: pesan.ShopRequest.r_auth:type_name -> pesan.ReAuthRequest
	14, // 18: pesan.ShopPb.shop_id:type_name -> pesan.UuId
	11, // 19: pesan.ShopPb.opens_at:type_name -> pesan.OperationHour
	11, // 20: pesan.ShopPb.closes_at:type_name -> pesan.OperationHour
	12, // 21: pesan.ShopPb.contacts:type_name -> pesan.Contact
	0,  // 22: pesan.ShopPb.operation_days:type_name -> pesan.Day
	14, // 23: pesan.RolePb.role_id:type_name -> pesan.UuId
	17, // 24: pesan.ShopRole.shop:type_name -> pesan.ShopPb
	18, // 25: pesan.ShopRole.role:type_name -> pesan.RolePb
	19, // 26: pesan.ShopPage.shops:type_name -> pesan.ShopRole
	9,  // 27: pesan.ShopPage.fresh_session:type_name -> pesan.RefreshReply
	6,  // 28: pesan.ShopPage.options:type_name -> pesan.PublicKeyOptions
	22, // 29: pesan.NewProductRequest.categories:type_name -> pesan.Category
	25, // 30: pesan.Category.available_from:type_name -> google.protobuf.Timestamp
	25, // 31: pesan.Category.available_until:type_name -> google.protobuf.Timestamp
	2,  // 32: pesan.Public.OnboardWithPublicKey:input_type -> pesan.OnboardRequest
	7,  // 33: pesan.Public.VerifyPublicKeyAndOnboard:input_type -> pesan.VerifyPublicKeyRequest
	2,  // 34: pesan.Public.OnboardWithPassword:input_type -> pesan.OnboardRequest
	26, // 35: pesan.Public.DiscoverLogin:input_type -> google.protobuf.Empty
	7,  // 36: pesan.Public.VerifyPublicKeyLogin:input_type -> pesan.VerifyPublicKeyRequest
	3,  // 37: pesan.Public.LoginWithPassword:input_type -> pesan.PasswordLoginRequest
	8,  // 38: pesan.Protected.RefreshSession:input_type -> pesan.RefreshRequest
	26, // 39: pesan.Protected.ReAuth:input_type -> google.protobuf.Empty
	7,  // 40: pesan.Protected.VerifyPublicKeyReAuth:input_type -> pesan.VerifyPublicKeyRequest
	4,  // 41: pesan.Protected.ReAuthWithPassword:input_type -> pesan.ReAuthPasswordRequest
	13, // 42: pesan.Protected.CreateNewShop:input_type -> pesan.NewShopRequest
	16, // 43: pesan.Protected.GetShops:input_type -> pesan.ShopRequest
	21, // 44: pesan.Protected.CreateNewProduct:input_type -> pesan.NewProductRequest
	24, // 45: pesan.Protected.UploadProductPhotos:input_type -> pesan.NewPhoto
	6,  // 46: pesan.Public.OnboardWithPublicKey:output_type -> pesan.PublicKeyOptions
	10, // 47: pesan.Public.VerifyPublicKeyAndOnboard:output_type -> pesan.UserSession
	10, // 48: pesan.Public.OnboardWithPassword:output_type -> pesan.UserSession
	6,  // 49: pesan.Public.DiscoverLogin:output_type -> pesan.PublicKeyOptions
	10, // 50: pesan.Public.VerifyPublicKeyLogin:output_type -> pesan.UserSession
	10, // 51: pesan.Public.LoginWithPassword:output_type -> pesan.UserSession
	9,  // 52: pesan.Protected.RefreshSession:output_type -> pesan.RefreshReply
	6,  // 53: pesan.Protected.ReAuth:output_type -> pesan.PublicKeyOptions
	9,  // 54: pesan.Protected.VerifyPublicKeyReAuth:output_type -> pesan.RefreshReply
	9,  // 55: pesan.Protected.ReAuthWithPassword:output_type -> pesan.RefreshReply
	15, // 56: pesan.Protected.CreateNewShop:output_type -> pesan.NewShopReply
	20, // 57: pesan.Protected.GetShops:output_type -> pesan.ShopPage
	23, // 58: pesan.Protected.CreateNewProduct:output_type -> pesan.NewProductReply
	26, // 59: pesan.Protected.UploadProductPhotos:output_type -> google.protobuf.Empty
	46, // [46:60] is the sub-list for method output_type
	32, // [32:46] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_pesan_proto_init() }
func file_pesan_proto_init() {
	if File_pesan_proto != nil {
		return
	}
	file_pesan_proto_msgTypes[0].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[3].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[5].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[8].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[11].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[13].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[14].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[15].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[17].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[18].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[19].OneofWrappers = []any{}
	file_pesan_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pesan_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pesan_proto_goTypes,
		DependencyIndexes: file_pesan_proto_depIdxs,
		EnumInfos:         file_pesan_proto_enumTypes,
		MessageInfos:      file_pesan_proto_msgTypes,
	}.Build()
	File_pesan_proto = out.File
	file_pesan_proto_rawDesc = nil
	file_pesan_proto_goTypes = nil
	file_pesan_proto_depIdxs = nil
}
